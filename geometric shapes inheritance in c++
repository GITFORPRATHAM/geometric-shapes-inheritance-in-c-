#include <iostream>
#include <cmath>

// Base class Shape
class Shape {
public:
    // Virtual functions for area and perimeter
    virtual double getArea() const = 0;
    virtual double getPerimeter() const = 0;
};

// Derived class Circle from Shape
class Circle : public Shape {
private:
    double radius;

public:
    // Constructor
    Circle(double r) : radius(r) {}

    // Override virtual functions for area and perimeter
    double getArea() const override {
        return M_PI * radius * radius; // Area = πr^2
    }

    double getPerimeter() const override {
        return 2 * M_PI * radius; // Perimeter = 2πr
    }
};

// Derived class Rectangle from Shape
class Rectangle : public Shape {
private:
    double length;
    double width;

public:
    // Constructor
    Rectangle(double l, double w) : length(l), width(w) {}

    // Override virtual functions for area and perimeter
    double getArea() const override {
        return length * width; // Area = length * width
    }

    double getPerimeter() const override {
        return 2 * (length + width); // Perimeter = 2 * (length + width)
    }
};

// Derived class Triangle from Shape
class Triangle : public Shape {
private:
    double sideA;
    double sideB;
    double sideC;

public:
    // Constructor
    Triangle(double a, double b, double c) : sideA(a), sideB(b), sideC(c) {}

    // Override virtual functions for area and perimeter
    double getArea() const override {
        // Using Heron's formula to calculate area
        double s = (sideA + sideB + sideC) / 2;
        return sqrt(s * (s - sideA) * (s - sideB) * (s - sideC));
    }

    double getPerimeter() const override {
        return sideA + sideB + sideC; // Perimeter = sum of all sides
    }
};

int main() {
    // Creating objects of different shapes
    Circle circle(5.0);
    Rectangle rectangle(4.0, 6.0);
    Triangle triangle(3.0, 4.0, 5.0);

    // Using polymorphism to calculate area and perimeter
    Shape* shapes[] = {&circle, &rectangle, &triangle};
    for (const auto& shape : shapes) {
        std::cout << "Area: " << shape->getArea() << ", Perimeter: " << shape->getPerimeter() << std::endl;
    }

    return 0;
}




